<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32f103c8_si4463_device.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32f103c8_si4463_device.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Dec 18 16:54:54 2017
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; loop() &rArr; WIRELESS_DATA_PROCESS::process_command() &rArr; WIRELESS_DATA_PROCESS::process_transfer() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[b1]">SI446X::SI446x_Wait_Cts()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">SI446X::SI446x_setup()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from drv_si4463.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from drv_delay.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[39]">fputc</a> from drv_uart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[40]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[54]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[42]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[cb]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[49]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[cc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[44]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[cf]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[da]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[db]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[de]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[df]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; loop() &rArr; WIRELESS_DATA_PROCESS::process_command() &rArr; WIRELESS_DATA_PROCESS::process_transfer() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ea]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7d]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[eb]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_smart_lock_process()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::clear_save_machine_data()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_device_process()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::check_machine_info()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::set_machine_info()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::function_process()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_add_device()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_logout()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::check_machine()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::check_machine(unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_login()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_logout()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tx_bytes_printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tx_bytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_setup(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[53]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[41]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[43]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ec]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[45]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[96]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::set_machine_info()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::login_save_machine_info()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
</UL>

<P><STRONG><a name="[57]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ed]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::clear_save_machine_data()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_setup(unsigned char)
</UL>

<P><STRONG><a name="[59]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ee]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[f1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[52]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[47]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_si4463.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[64]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[6e]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[63]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[6c]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[62]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_setup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Gpio_Init()
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Gpio_Init()
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_setup
</UL>

<P><STRONG><a name="[76]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[bd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[68]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[b4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_setup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Gpio_Init()
</UL>

<P><STRONG><a name="[67]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[71]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[c4]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</UL>

<P><STRONG><a name="[66]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</UL>

<P><STRONG><a name="[c6]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>

<P><STRONG><a name="[c5]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
</UL>

<P><STRONG><a name="[69]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32_flash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::clear_save_machine_data()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::set_machine_info()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_setup(unsigned char)
</UL>

<P><STRONG><a name="[6a]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_flash.o(i.STMFLASH_ReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_setup(unsigned char)
</UL>

<P><STRONG><a name="[6b]"></a>STMFLASH_Write</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, stm32_flash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::clear_save_machine_data()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::set_machine_info()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_logout()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_login()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_logout()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_setup(unsigned char)
</UL>

<P><STRONG><a name="[6d]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stm32_flash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, drv_delay.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[c1]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[c2]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[c0]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[be]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
</UL>

<P><STRONG><a name="[c7]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
</UL>

<P><STRONG><a name="[6f]"></a>USART_DeInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
</UL>

<P><STRONG><a name="[a1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_smart_lock_process()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmd_Loop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_tx_bytes
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tx_bytes
</UL>

<P><STRONG><a name="[70]"></a>USART_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
</UL>

<P><STRONG><a name="[72]"></a>loop()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = loop() &rArr; WIRELESS_DATA_PROCESS::process_command() &rArr; WIRELESS_DATA_PROCESS::process_transfer() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>setup()</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, main.o(i._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = setup() &rArr; SI446X::SI446x_setup() &rArr; debug_tx_bytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_setup
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_setup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_setup
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_setup(unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>WIRELESS_DATA_PROCESS::host_login(unsigned)</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS10host_loginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::host_login(unsigned) &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_add_device()
</UL>

<P><STRONG><a name="[80]"></a>WIRELESS_DATA_PROCESS::host_login()</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS10host_loginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::host_login() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::login_save_machine_info()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[82]"></a>WIRELESS_DATA_PROCESS::host_logout()</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS11host_logoutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::host_logout() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[83]"></a>WIRELESS_DATA_PROCESS::device_login()</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS12device_loginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::device_login() &rArr; WIRELESS_DATA_PROCESS::process_response(unsigned char) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::login_save_machine_info()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[73]"></a>WIRELESS_DATA_PROCESS::process_loop()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS12process_loopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::process_loop() &rArr; WIRELESS_DATA_PROCESS::process_receive() &rArr; WIRELESS_DATA_PROCESS::host_login() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[86]"></a>WIRELESS_DATA_PROCESS::check_machine(unsigned)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS13check_machineEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::check_machine(unsigned) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_add_device()
</UL>

<P><STRONG><a name="[87]"></a>WIRELESS_DATA_PROCESS::check_machine()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS13check_machineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::check_machine() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[88]"></a>WIRELESS_DATA_PROCESS::device_logout()</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS13device_logoutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::device_logout() &rArr; WIRELESS_DATA_PROCESS::process_response(unsigned char) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[7b]"></a>WIRELESS_DATA_PROCESS::process_setup(unsigned char)</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS13process_setupEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::process_setup(unsigned char) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[8a]"></a>WIRELESS_DATA_PROCESS::test_transfer()</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS13test_transferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::test_transfer() &rArr; debug_tx_bytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::crc16(const void*, unsigned short)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::cryption_data_process(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tx_bytes
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[92]"></a>WIRELESS_DATA_PROCESS::calc_check_sum(unsigned char*, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS14calc_check_sumEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIRELESS_DATA_PROCESS::calc_check_sum(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[90]"></a>WIRELESS_DATA_PROCESS::host_add_device()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS15host_add_deviceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::host_add_device() &rArr; WIRELESS_DATA_PROCESS::host_login(unsigned) &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::check_machine(unsigned)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[74]"></a>WIRELESS_DATA_PROCESS::process_command()</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS15process_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::process_command() &rArr; WIRELESS_DATA_PROCESS::process_transfer() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::clear_save_machine_data()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::check_machine_info()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::set_machine_info()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_add_device()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::calc_check_sum(unsigned char*, unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_cmd_Loop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_tx_bytes
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[85]"></a>WIRELESS_DATA_PROCESS::process_receive()</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS15process_receiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::process_receive() &rArr; WIRELESS_DATA_PROCESS::host_login() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::crc16(const void*, unsigned short)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::cryption_data_process(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::function_process()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_logout()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::check_machine()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_login()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_logout()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_loop()
</UL>

<P><STRONG><a name="[9a]"></a>WIRELESS_DATA_PROCESS::function_process()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS16function_processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::function_process() &rArr; WIRELESS_DATA_PROCESS::process_response(unsigned char) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_smart_lock_process()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_device_process()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[7e]"></a>WIRELESS_DATA_PROCESS::process_response(unsigned char)</STRONG> (Thumb, 652 bytes, Stack size 56 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS16process_responseEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::process_response(unsigned char) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::crc16(const void*, unsigned short)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::function_process()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_logout()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_login()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_logout()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[94]"></a>WIRELESS_DATA_PROCESS::process_transfer()</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS16process_transferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::process_transfer() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::crc16(const void*, unsigned short)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::cryption_data_process(unsigned char*, unsigned char, unsigned char*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[95]"></a>WIRELESS_DATA_PROCESS::set_machine_info()</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS16set_machine_infoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::set_machine_info() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[a0]"></a>WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS17wait_wireless_ackEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
</UL>

<P><STRONG><a name="[7f]"></a>WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS17wait_wireless_ackEtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_logout()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login(unsigned)
</UL>

<P><STRONG><a name="[98]"></a>WIRELESS_DATA_PROCESS::check_machine_info()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS18check_machine_infoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::check_machine_info() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[9c]"></a>WIRELESS_DATA_PROCESS::test_device_process()</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS19test_device_processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::test_device_process() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::function_process()
</UL>

<P><STRONG><a name="[8c]"></a>WIRELESS_DATA_PROCESS::cryption_data_process(unsigned char*, unsigned char, unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS21cryption_data_processEPhhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIRELESS_DATA_PROCESS::cryption_data_process(unsigned char*, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
</UL>

<P><STRONG><a name="[97]"></a>WIRELESS_DATA_PROCESS::clear_save_machine_data()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS23clear_save_machine_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::clear_save_machine_data() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[81]"></a>WIRELESS_DATA_PROCESS::login_save_machine_info()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS23login_save_machine_infoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WIRELESS_DATA_PROCESS::login_save_machine_info()
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::device_login()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::host_login()
</UL>

<P><STRONG><a name="[9d]"></a>WIRELESS_DATA_PROCESS::test_smart_lock_process()</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS23test_smart_lock_processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WIRELESS_DATA_PROCESS::test_smart_lock_process() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_uart_tx_bytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::function_process()
</UL>

<P><STRONG><a name="[8d]"></a>WIRELESS_DATA_PROCESS::crc16(const void*, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, data_process.o(i._ZN21WIRELESS_DATA_PROCESS5crc16EPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WIRELESS_DATA_PROCESS::crc16(const void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
</UL>

<P><STRONG><a name="[a2]"></a>SI446X::SI446x_Reset()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_si4463.o(i._ZN6SI446X12SI446x_ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SI446X::SI446x_Reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_us
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[7a]"></a>SI446X::SI446x_setup()</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, drv_si4463.o(i._ZN6SI446X12SI446x_setupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SI446X::SI446x_setup() &rArr; debug_tx_bytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Power_Up(unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tx_bytes
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_flashing
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Part_Informatoin(unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Device_Status()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Init()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Set_Power(unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Gpio_Init()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_get_rssi()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Wait_Cts()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[a6]"></a>SI446X::SI446x_Power_Up(unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, drv_si4463.o(i._ZN6SI446X15SI446x_Power_UpEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI446X::SI446x_Power_Up(unsigned) &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[ab]"></a>SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, drv_si4463.o(i._ZN6SI446X15SI446x_Start_RxEhhthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; SI446X::SI446x_Reset_TxFifo() &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset_TxFifo()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset_RxFifo()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[b1]"></a>SI446X::SI446x_Wait_Cts()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X15SI446x_Wait_CtsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Packet(unsigned char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[ac]"></a>SI446X::si446x_get_rssi()</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, drv_si4463.o(i._ZN6SI446X15si446x_get_rssiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI446X::si446x_get_rssi() &rArr; SI446X::SI446x_Get_Modem_Status(unsigned char*) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Modem_Status(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[a5]"></a>SI446X::SI446x_Gpio_Init()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X16SI446x_Gpio_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SI446X::SI446x_Gpio_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[a8]"></a>SI446X::SI446x_Set_Power(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X16SI446x_Set_PowerEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SI446X::SI446x_Set_Power(unsigned char) &rArr; SI446X::SI446x_Set_Property_1(SI446X_PROPERTY, unsigned char) &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Set_Property_1(SI446X_PROPERTY, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[ae]"></a>SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X17SI446x_Write_CmdsEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Wait_Cts()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Power_Up(unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Part_Informatoin(unsigned char*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_PH_Interrupt_Status(unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Device_Status()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Modem_Status(unsigned char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Set_Property_1(SI446X_PROPERTY, unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset_TxFifo()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset_RxFifo()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Init()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b8]"></a>SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, drv_si4463.o(i._ZN6SI446X18SI446x_Config_GpioEhhhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Init()
</UL>

<P><STRONG><a name="[a7]"></a>SI446X::SI446x_Config_Init()</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, drv_si4463.o(i._ZN6SI446X18SI446x_Config_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SI446X::SI446x_Config_Init() &rArr; SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Set_Property_1(SI446X_PROPERTY, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[ba]"></a>SI446X::SI446x_Read_Packet(unsigned char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_si4463.o(i._ZN6SI446X18SI446x_Read_PacketEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI446X::SI446x_Read_Packet(unsigned char*) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Wait_Cts()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
</UL>

<P><STRONG><a name="[8f]"></a>SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_si4463.o(i._ZN6SI446X18SI446x_Send_PacketEPhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; SI446X::SI446x_Reset_TxFifo() &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset_TxFifo()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
</UL>

<P><STRONG><a name="[af]"></a>SI446X::SI446x_Reset_RxFifo()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X19SI446x_Reset_RxFifoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_Reset_RxFifo() &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b0]"></a>SI446X::SI446x_Reset_TxFifo()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X19SI446x_Reset_TxFifoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_Reset_TxFifo() &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>SI446X::SI446x_Change_Status(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X20SI446x_Change_StatusEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_Change_Status(unsigned char) &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_response(unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[b9]"></a>SI446X::SI446x_Read_Response(unsigned char*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X20SI446x_Read_ResponseEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Wait_Cts()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Part_Informatoin(unsigned char*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_PH_Interrupt_Status(unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Device_Status()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Modem_Status(unsigned char*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[99]"></a>SI446X::si446x_recalibration()</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_si4463.o(i._ZN6SI446X20si446x_recalibrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SI446X::si446x_recalibration() &rArr; SI446X::SI446x_Config_Init() &rArr; SI446X::SI446x_Config_Gpio(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Power_Up(unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_flashing
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Get_Device_Status()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Init()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Set_Power(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_receive()
</UL>

<P><STRONG><a name="[b7]"></a>SI446X::SI446x_Set_Property_1(SI446X_PROPERTY, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_si4463.o(i._ZN6SI446X21SI446x_Set_Property_1E15SI446X_PROPERTYh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI446X::SI446x_Set_Property_1(SI446X_PROPERTY, unsigned char) &rArr; SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Config_Init()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Set_Power(unsigned char)
</UL>

<P><STRONG><a name="[b3]"></a>SI446X::SI446x_Get_Modem_Status(unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X23SI446x_Get_Modem_StatusEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_Get_Modem_Status(unsigned char*) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_get_rssi()
</UL>

<P><STRONG><a name="[aa]"></a>SI446X::SI446x_Get_Device_Status()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X24SI446x_Get_Device_StatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_Get_Device_Status() &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[bb]"></a>SI446X::SI446x_PH_Interrupt_Status(unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X26SI446x_PH_Interrupt_StatusEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_PH_Interrupt_Status(unsigned char*) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
</UL>

<P><STRONG><a name="[a9]"></a>SI446X::SI446x_Get_Part_Informatoin(unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_si4463.o(i._ZN6SI446X27SI446x_Get_Part_InformatoinEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI446X::SI446x_Get_Part_Informatoin(unsigned char*) &rArr; SI446X::SI446x_Read_Response(unsigned char*, unsigned char) &rArr; SI446X::SI446x_Wait_Cts() &rArr;  SI446X::SI446x_setup() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[84]"></a>SI446X::read_IRQ()</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, drv_si4463.o(i._ZN6SI446X8read_IRQEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Start_Rx(unsigned char, unsigned char, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Change_Status(unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_tx_bytes_printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_delay_ms
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_PH_Interrupt_Status(unsigned char*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Packet(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_loop()
</UL>

<P><STRONG><a name="[50]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_uart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[8e]"></a>debug_tx_bytes</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_uart.o(i.debug_tx_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = debug_tx_bytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_transfer()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[bc]"></a>debug_tx_bytes_printf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_uart.o(i.debug_tx_bytes_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
</UL>

<P><STRONG><a name="[9f]"></a>drv_delay_ms</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, drv_delay.o(i.drv_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::read_IRQ()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_smart_lock_process()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_transfer()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[78]"></a>drv_delay_setup</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, drv_delay.o(i.drv_delay_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_delay_setup &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[a3]"></a>drv_delay_us</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drv_delay.o(i.drv_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Reset()
</UL>

<P><STRONG><a name="[ad]"></a>drv_led_flashing</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_led.o(i.drv_led_flashing))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::si446x_recalibration()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[79]"></a>drv_led_setup</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_led.o(i.drv_led_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_led_setup &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[a4]"></a>drv_spi_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, drv_spi.o(i.drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_spi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_setup()
</UL>

<P><STRONG><a name="[b2]"></a>drv_spi_read_write_byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, drv_spi.o(i.drv_spi_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_spi_read_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Wait_Cts()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Send_Packet(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Response(unsigned char*, unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Read_Packet(unsigned char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI446X::SI446x_Write_Cmds(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[77]"></a>drv_uart_setup</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, drv_uart.o(i.drv_uart_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = drv_uart_setup &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[93]"></a>drv_uart_tx_bytes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_uart.o(i.drv_uart_tx_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_uart_tx_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::test_smart_lock_process()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = main &rArr; loop() &rArr; WIRELESS_DATA_PROCESS::process_command() &rArr; WIRELESS_DATA_PROCESS::process_transfer() &rArr; WIRELESS_DATA_PROCESS::wait_wireless_ack(unsigned short, unsigned) &rArr; SI446X::read_IRQ() &rArr; debug_tx_bytes_printf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[91]"></a>serial_cmd_Loop</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, drv_uart.o(i.serial_cmd_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_cmd_Loop
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRELESS_DATA_PROCESS::process_command()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_flash.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
